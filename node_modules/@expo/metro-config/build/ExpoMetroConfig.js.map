{"version":3,"file":"ExpoMetroConfig.js","sourceRoot":"","sources":["../src/ExpoMetroConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport {\n  ProjectTarget,\n  getConfig,\n  getDefaultTarget,\n  projectHasModule,\n  resolveModule,\n} from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport { Reporter } from 'metro';\nimport { ConfigT, InputConfigT } from 'metro-config';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    '/node_modules/react-devtools-core/.+\\\\.js$',\n    '/node_modules/react-refresh/.+\\\\.js$',\n    '/node_modules/scheduler/.+\\\\.js$',\n  ].join('|')\n);\n\nexport interface DefaultConfigOptions {\n  target?: ProjectTarget;\n}\n\nexport function getDefaultConfig(\n  projectRoot: string,\n  options: DefaultConfigOptions = {}\n): InputConfigT {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const reactNativePath = path.dirname(\n    resolveModule('react-native/package.json', projectRoot, exp)\n  );\n\n  const target = options.target ?? process.env.EXPO_TARGET ?? getDefaultTarget(projectRoot);\n  if (!(target === 'managed' || target === 'bare')) {\n    throw new Error(\n      `Invalid target: '${target}'. Debug info: \\n${JSON.stringify(\n        {\n          'options.target': options.target,\n          EXPO_TARGET: process.env.EXPO_TARGET,\n          default: getDefaultTarget(projectRoot),\n        },\n        null,\n        2\n      )}`\n    );\n  }\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  return {\n    resolver: {\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: ['ios', 'android', 'native'],\n      sourceExts,\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(path.join(reactNativePath, 'Libraries/Core/InitializeCore')),\n        // TODO: Bacon: load Expo side-effects\n      ],\n      getPolyfills: () => require(path.join(reactNativePath, 'rn-get-polyfills'))(),\n    },\n    symbolicator: {\n      customizeFrame: (frame: { file: string | null }) => {\n        const collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n        return { collapse };\n      },\n    },\n    transformer: {\n      babelTransformerPath: require.resolve('metro-react-native-babel-transformer'),\n      // TODO: Bacon: Add path for web platform\n      assetRegistryPath: path.join(reactNativePath, 'Libraries/Image/AssetRegistry'),\n      assetPlugins: [resolveModule('expo/tools/hashAssetFiles', projectRoot, exp)],\n    },\n  };\n}\n\nexport interface LoadOptions {\n  config?: string;\n  maxWorkers?: number;\n  port?: number;\n  reporter?: Reporter;\n  resetCache?: boolean;\n  target?: ProjectTarget;\n}\n\nexport async function loadAsync(\n  projectRoot: string,\n  { reporter, target, ...metroOptions }: LoadOptions = {}\n): Promise<ConfigT> {\n  let defaultConfig = getDefaultConfig(projectRoot, { target });\n  if (reporter) {\n    defaultConfig = { ...defaultConfig, reporter };\n  }\n  const { loadConfig } = importMetroConfigFromProject(projectRoot);\n  return await loadConfig({ cwd: projectRoot, projectRoot, ...metroOptions }, defaultConfig);\n}\n\nfunction importMetroConfigFromProject(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const resolvedPath = projectHasModule('metro-config', projectRoot, exp);\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing package \"metro-config\" in the project. ' +\n        'This usually means React Native is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n"]}