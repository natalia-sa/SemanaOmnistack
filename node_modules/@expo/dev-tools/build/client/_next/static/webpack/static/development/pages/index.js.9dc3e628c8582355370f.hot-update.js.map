{"version":3,"file":"static/webpack/static/development/pages/index.js.9dc3e628c8582355370f.hot-update.js","sources":["webpack:///./common/state.js"],"sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport uniqBy from 'lodash/uniqBy';\nimport set from 'lodash/fp/set';\nimport { ApolloError } from 'apollo-client';\n\nimport * as Sets from 'app/common/sets';\n\nconst delay = time => new Promise(resolve => window.setTimeout(resolve, time));\n\nexport const sourceSelect = (source, props) => {\n  const { projectManagerLayout: layout } = props.data;\n  const existingIndex = layout.sources.findIndex(s => s.id === source.id);\n  const selected = source.id;\n\n  let sources;\n  if (existingIndex >= 0) {\n    // If source is already shown, only select it.\n    sources = layout.sources;\n  } else {\n    const selectedIndex = layout.sources.findIndex(\n      s => layout.selected && s.id === layout.selected.id\n    );\n    // Replace the source in the selected panel.\n    // If selectedIndex is -1 (no panel selected), set the first item.\n    sources = set(Math.max(selectedIndex, 0), source, layout.sources);\n  }\n\n  // NOTE(jim): Breaks out of publishing modal.\n  props.dispatch({\n    type: 'UPDATE',\n    state: {\n      isPublishing: false,\n    },\n  });\n\n  return updateLayout(props.client, layout.id, { selected, sources });\n};\n\nexport const sourceSwap = ({ targetSourceId, movedSourceId }, props) => {\n  const { projectManagerLayout: layout, currentProject } = props.data;\n  const targetIndex = layout.sources.findIndex(source => source.id === targetSourceId);\n  const movedIndex = layout.sources.findIndex(source => source.id === movedSourceId);\n  let sources;\n  if (movedIndex === -1) {\n    const newSource = currentProject.sources.find(source => source.id === movedSourceId);\n    sources = set(targetIndex, newSource, layout.sources);\n  } else {\n    sources = Sets.swap(layout.sources, targetIndex, movedIndex);\n  }\n\n  return updateLayout(props.client, layout.id, {\n    selected: layout.selected ? layout.selected.id : null,\n    sources,\n  });\n};\n\nexport const sectionSelect = ({ id }, props) => {\n  const { projectManagerLayout: layout } = props.data;\n  const layoutInput = {\n    selected: id,\n    sources: layout.sources,\n  };\n  return updateLayout(props.client, layout.id, layoutInput);\n};\n\nexport const sectionClear = props => {\n  const { projectManagerLayout: layout } = props.data;\n  const layoutInput = {\n    selected: null,\n    sources: layout.sources,\n  };\n  return updateLayout(props.client, layout.id, layoutInput);\n};\n\nexport const sectionCount = ({ count }, props) => {\n  const { projectManagerLayout: layout, currentProject } = props.data;\n  const sources = currentProject.sources.filter(source => {\n    return source.__typename !== 'Issues' || source.messages.count > 0;\n  });\n  let newSources;\n  if (count > layout.sources.length) {\n    newSources = uniqBy([...layout.sources, ...sources], source => source.id).slice(0, count);\n  } else {\n    newSources = layout.sources.slice(0, count);\n  }\n\n  let selected;\n  if (layout.selected && newSources.some(source => source.id === layout.selected.id)) {\n    selected = layout.selected.id;\n  } else {\n    selected = null;\n  }\n\n  const layoutInput = {\n    selected,\n    sources: newSources,\n  };\n\n  // NOTE(jim): Breaks out of publishing modal.\n  props.dispatch({\n    type: 'UPDATE',\n    state: {\n      isPublishing: false,\n    },\n  });\n\n  return updateLayout(props.client, layout.id, layoutInput);\n};\n\nexport const update = (state, props) => {\n  props.dispatch({ type: 'UPDATE', state });\n};\n\nconst UPDATE_PROJECT_MANAGER_QUERY = gql`\n  mutation UpdateProjectManagerLayout($input: ProjectManagerLayoutInput!) {\n    setProjectManagerLayout(input: $input) {\n      id\n      selected {\n        id\n      }\n      sources {\n        id\n        messages {\n          unreadCount\n        }\n      }\n    }\n  }\n`;\n\nfunction updateLayout(client, id, input) {\n  return client.mutate({\n    mutation: UPDATE_PROJECT_MANAGER_QUERY,\n    variables: {\n      input: {\n        selected: input.selected,\n        sources: input.sources.map(source => source.id),\n      },\n    },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      setProjectManagerLayout: {\n        __typename: 'ProjectManagerLayout',\n        id,\n        selected: input.selected\n          ? client.readFragment({\n              id: input.selected,\n              fragment: gql`\n                fragment SelectedSource on Source {\n                  __typename\n                  id\n                }\n              `,\n            })\n          : null,\n        sources: input.sources.map(source => ({\n          ...source,\n          messages: {\n            __typename: 'MessageConnection',\n            unreadCount: 0,\n          },\n        })),\n      },\n    },\n  });\n}\n\nexport const openBrowser = async props => {\n  const id = new Date().getTime();\n\n  // NOTE(jim): Breaks out of publishing modal.\n  props.dispatch({\n    type: 'UPDATE',\n    state: {\n      isPublishing: false,\n    },\n  });\n\n  props.dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      id,\n      name: 'info',\n      text: `Attempting to open the project in a web browser...`,\n    },\n  });\n\n  let hasError = false;\n  try {\n    let result = await props.client.mutate({\n      mutation: gql`\n        mutation OpenWeb {\n          openWeb {\n            error\n          }\n        }\n      `,\n      variables: {},\n    });\n    if (result.data.openWeb.error) {\n      hasError = true;\n    }\n  } catch (e) {\n    hasError = true;\n  }\n\n  if (!hasError) {\n    props.dispatch({\n      type: 'REMOVE_TOAST',\n      id,\n    });\n  } else {\n    props.dispatch({\n      type: 'ADD_TOAST',\n      toast: {\n        id,\n        name: 'error',\n        text: `Error opening for web. Check logs for details.`,\n      },\n    });\n  }\n};\n\nexport const openSimulator = async (platform, props) => {\n  const id = new Date().getTime();\n  // NOTE(jim): Breaks out of publishing modal.\n  props.dispatch({\n    type: 'UPDATE',\n    state: {\n      isPublishing: false,\n    },\n  });\n\n  props.dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      id,\n      name: 'info',\n      text: `Attempting to open a simulator...`,\n    },\n  });\n\n  let hasError = false;\n  // TODO(freiksenet): Add generic error handling\n  try {\n    const result = await props.client.mutate({\n      mutation: gql`\n        mutation OpenSimulator($platform: Platform!) {\n          openSimulator(platform: $platform) {\n            __typename\n          }\n        }\n      `,\n      variables: { platform },\n    });\n    hasError = result.data.openSimulator.__typename === 'OpenSimulatorError';\n  } catch (e) {\n    hasError = true;\n  }\n\n  if (!hasError) {\n    props.dispatch({\n      type: 'ADD_TOAST',\n      toast: {\n        id,\n        name: 'success',\n        text: `Simulator ready`,\n      },\n    });\n\n    await delay(2000);\n\n    props.dispatch({\n      type: 'REMOVE_TOAST',\n      id,\n    });\n  } else {\n    props.dispatch({\n      type: 'ADD_TOAST',\n      toast: {\n        id,\n        name: 'error',\n        text: `Error opening simulator. Check Metro logs for details.`,\n      },\n    });\n  }\n};\n\nexport const setHostType = ({ hostType }, { client }) => {\n  return client.mutate({\n    mutation: gql`\n      mutation SetHostType($hostType: HostType!) {\n        setProjectSettings(settings: { hostType: $hostType }) {\n          id\n          manifestUrl\n          settings {\n            hostType\n          }\n        }\n      }\n    `,\n    variables: { hostType },\n  });\n};\n\nexport const setBuildFlags = ({ dev, minify }, { client }) => {\n  return client.mutate({\n    mutation: gql`\n      mutation SetBuildFlags($dev: Boolean!, $minify: Boolean!) {\n        setProjectSettings(settings: { dev: $dev, minify: $minify }) {\n          id\n          settings {\n            dev\n            minify\n          }\n        }\n      }\n    `,\n    variables: { dev, minify },\n  });\n};\n\nexport const sendProjectUrl = async (recipient, props) => {\n  if (!props.data.user.username) {\n    props.dispatch({\n      type: 'ADD_TOAST',\n      toast: {\n        id: 'authentication-required',\n        name: 'info',\n        text: 'Authentication is required. Please check the terminal to log in.',\n      },\n    });\n  }\n  try {\n    await props.client.mutate({\n      mutation: gql`\n        mutation SendProjectUrl($recipient: String!) {\n          sendProjectUrl(recipient: $recipient) {\n            medium\n          }\n        }\n      `,\n      variables: { recipient },\n    });\n  } catch (error) {\n    if (error instanceof ApolloError) {\n      props.dispatch({\n        type: 'ADD_TOAST',\n        toast: {\n          id: 'send-email-or-number',\n          name: 'error',\n          text: `Oops, sending a link to \"${recipient}\" failed.`,\n        },\n      });\n      return;\n    } else {\n      throw error;\n    }\n  }\n\n  props.dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      id: 'send-email-or-number',\n      name: 'success',\n      text: `We sent ${recipient} a link to open this project.`,\n    },\n  });\n};\n\nexport const updateProjectConfig = (config, props) => {\n  return props.client.mutate({\n    mutation: gql`\n      mutation SetProjectConfig($input: ProjectConfigInput!) {\n        setProjectConfig(input: $input) {\n          id\n          config {\n            name\n            description\n            slug\n            githubUrl\n          }\n        }\n      }\n    `,\n    variables: {\n      input: config,\n    },\n  });\n};\n\nexport const publishProject = async (options, props) => {\n  const publishingId = new Date().getTime();\n  props.dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      id: publishingId,\n      name: 'info',\n      text: `Publishing...`,\n    },\n  });\n  await updateProjectConfig(options.config, props);\n  update(\n    {\n      isPublishing: false,\n    },\n    props\n  );\n  if (options.optimize) {\n    await props.client.mutate({\n      mutation: gql`\n        mutation OptimizeAssets {\n          optimizeAssets {\n            projectDir\n          }\n        }\n      `,\n    });\n  }\n  let result;\n  try {\n    result = await props.client.mutate({\n      mutation: gql`\n        mutation PublishProject {\n          publishProject {\n            url\n          }\n        }\n      `,\n    });\n  } catch (error) {\n    props.dispatch({\n      type: 'ADD_TOAST',\n      toast: {\n        id: new Date().getTime(),\n        name: 'alert',\n        text: `Failed to publish the project. See Metro logs for details.`,\n      },\n    });\n    throw error;\n  } finally {\n    props.dispatch({\n      type: 'REMOVE_TOAST',\n      id: publishingId,\n    });\n  }\n  const url = result.data.publishProject.url;\n  props.dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      id: new Date().getTime(),\n      name: 'success',\n      text: (\n        <span>\n          Successfully published to{' '}\n          <a target=\"_blank\" href={url}>\n            {url}\n          </a>\n          .\n        </span>\n      ),\n    },\n  });\n};\n\nconst UPDATE_LAST_READ = gql`\n  mutation UpdateLastread($sourceId: ID!, $lastReadCursor: String!) {\n    updateLastRead(sourceId: $sourceId, lastReadCursor: $lastReadCursor) {\n      id\n      messages {\n        unreadCount\n        pageInfo {\n          lastReadCursor\n        }\n      }\n    }\n  }\n`;\n\nexport const updateLastRead = async ({ sourceId, sourceType, lastReadCursor }, props) => {\n  return props.client.mutate({\n    mutation: UPDATE_LAST_READ,\n    variables: {\n      sourceId,\n      lastReadCursor,\n    },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      updateLastRead: {\n        id: sourceId,\n        __typename: sourceType,\n        messages: {\n          unreadCount: 0,\n          __typename: 'MessageConnection',\n          pageInfo: {\n            __typename: 'PageInfo',\n            lastReadCursor,\n          },\n        },\n      },\n    },\n  });\n};\n\nexport const clearMessages = async ({ source }, props) => {\n  return props.client.mutate({\n    mutation: gql`\n      mutation ClearMessages($sourceId: ID!) {\n        clearMessages(sourceId: $sourceId) {\n          id\n          messages {\n            count\n            unreadCount\n          }\n        }\n      }\n    `,\n    variables: {\n      sourceId: source.id,\n    },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      clearMessages: {\n        __typename: source.__typename,\n        id: source.id,\n        messages: {\n          __typename: 'MessageConnection',\n          count: 0,\n          unreadCount: 0,\n          nodes: [],\n        },\n      },\n    },\n  });\n};\n"],"mappings":"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","sourceRoot":""}